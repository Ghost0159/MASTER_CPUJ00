File /src/savedata/wifilist.c
Label GMDATA_ID_WIFILIST
Set void WifiList_Init(WIFI_LIST * list)
Set void WifiList_SetFriendInfo( WIFI_LIST* list, int no, int type, u32 value )
Set void WifiList_SetFriendName( WIFI_LIST *list, int no, STRBUF* pBuf )
Set void WifiList_SetFriendGroupName( WIFI_LIST *list, int no, STRBUF* pBuf )
Set void WifiList_ResetData( WIFI_LIST *list, int no)
Set void WifiList_CopyData( WIFI_LIST *list, int no, int copyNo)
Set void WifiList_FormUpData( WIFI_LIST *list)
Set void WifiList_SetLastPlayDate( WIFI_LIST *list, int no)
Set void WifiList_AddPorin( WIFI_LIST *list, int no, int pofin )
Set void WifiList_DataMarge( WIFI_LIST *list, int delNo, int no)
Chk WIFI_LIST* SaveData_GetWifiListData(SAVEDATA * sv)
File /src/savedata/system_data.c
Label GMDATA_ID_SYSTEM_DATA
Set void SYSTEMDATA_Init(SYSTEMDATA * sys)
Set void SYSTEMDATA_Update(SYSTEMDATA * sysdt)
Set void SYSTEMDATA_SetBeaconMPOpenFlag(SYSTEMDATA * sysdt, BOOL flag)
Set void SYSTEMDATA_SetWifiMPOpenFlag(SYSTEMDATA * sysdt, BOOL flag)
Set void SYSTEMDATA_SetDpwInfo( SYSTEMDATA * sysdt, s32 profileId )
Set void GMTIME_Init(GMTIME * gt)
Set void GMTIME_SetPenaltyTime(GMTIME * gt)
Set void GMTIME_CountDownPenaltyTime(GMTIME * gt, int diff_minute)
Chk SYSTEMDATA * SaveData_GetSystemData(SAVEDATA * sv)
Chk GMTIME * SaveData_GetGameTime(SAVEDATA * sv)
## File /src/savedata/player_data.c
## Label GMDATA_ID_PLAYER_DATA
## Chk pd MYSTATUS * SaveData_GetMyStatus(SAVEDATA * sv)
## Chk pd CONFIG * SaveData_GetConfig(SAVEDATA * sv)
## Chk pd COIN * SaveData_GetMyCoin(SAVEDATA * sv)
## Chk pd PLAYTIME * SaveData_GetPlayTime(SAVEDATA * sv)
## Set pd void PLAYERDATA_Init(PLAYER_DATA * pd)
File /src/poketool/pokeparty.c
Label GMDATA_ID_TEMOTI_POKE
Set void PokeParty_Init(POKEPARTY * party, int max)
Set BOOL PokeParty_Add(POKEPARTY * party, POKEMON_PARAM * poke)
Set BOOL PokeParty_Delete(POKEPARTY * party, int pos)
Set void PokeParty_SetMemberData( POKEPARTY* party, int pos, POKEMON_PARAM* pp )
Set BOOL PokeParty_ExchangePosition(POKEPARTY * party, int pos1, int pos2)
Set void PokeParty_Copy(const POKEPARTY * src, POKEPARTY * dst)
Chk POKEPARTY * SaveData_GetTemotiPokemon(SAVEDATA * sv)
Set void Debug_PokeParty_MakeParty(POKEPARTY * party)
File /src/itemtool/myitem.c
Label GMDATA_ID_TEMOTI_ITEM
Set void MyItem_Init(MYITEM * item)
Set void MyItem_Copy(const MYITEM * from, MYITEM * to)
Set void MyItem_CnvButtonItemSet( MYITEM * myitem, u32 setitem )
Set BOOL MyItem_AddItem( MYITEM * myitem, u16 item_no, u16 num, u32 heap )
Set BOOL MyItem_SubItem( MYITEM * myitem, u16 item_no, u16 num, u32 heap )
Set BOOL MyItem_SubItemDirect( MINEITEM * myitem, u32 max, u16 item_no, u16 num, u32 heap )
Set void * MyItem_MakeBagData( MYITEM * myitem, const u8 * list, u32 heap );
Chk MYITEM * SaveData_GetMyItem(SAVEDATA * sv)
File /src/field/eventflag.c
Label GMDATA_ID_EVENT_WORK
Set void EventWork_Init(EVENTWORK * evwk)
Chk EVENTWORK * SaveData_GetEventWork(SAVEDATA * sv)
Set void EventWork_SetEventFlag( EVENTWORK * ev, u16 flag_no)
Set void EventWork_ResetEventFlag( EVENTWORK * ev, u16 flag_no)
File /src/field/poketch_data.c
Label GMDATA_ID_POKETCH_DATA
Set void PoketchData_Init(POKETCH_DATA* poketch_data)
Set void PoketchData_SetPoketchGetFlag( POKETCH_DATA* poketch_data )
Set BOOL PoketchData_AddApplication(POKETCH_DATA * poketch_data, int app_id)
Set int PoketchData_SetApplicationPosNext( POKETCH_DATA* poketch_data )
Set int PoketchData_SetApplicationPosPrev( POKETCH_DATA* poketch_data )
Set void PoketchData_SetApplicationPos( POKETCH_DATA* poketch_data, int pos )
Set void PoketchData_SetColorType( POKETCH_DATA* poketch_data, u32 color_type )
Set void PoketchData_SetPedometer( POKETCH_DATA* poketch_data, u32 count )
Set void PoketchData_SetAlarm( POKETCH_DATA* poketch_data, BOOL switch_flag, u32 hour, u32 min )
Set void PoketchData_Calendar_SetMark( POKETCH_DATA* poketch_data, u32 month, u32 day )
Set void PoketchData_Calendar_ClearMark( POKETCH_DATA* poketch_data, u32 month, u32 day )
Set void PoketchData_MarkMap_SetMarkPos( POKETCH_DATA* poketch_data, int id, u8 x, u8 y )
Set void PoketchData_DotArt_SetBitData( POKETCH_DATA* poketch_data, const u8* src )
Set void PoketchData_PokeHistory_Add( POKETCH_DATA* poketch_data, const POKEMON_PASO_PARAM* ppp )
Chk POKETCH_DATA * SaveData_GetPoketchData(SAVEDATA * sv)
Set void PoketchData_AddAllApplication( POKETCH_DATA* poketch_data )
File /src/field/situation.c
Label GMDATA_ID_SITUATION
Set void Situation_Init(SITUATION * st)
Set void Situation_SetSpecialLocation(SITUATION * st, LOCATION_WORK* lw)
Set void Situation_SetWeatherID(SITUATION * st, u16 weather_id)
Set void Situation_SetWarpID(SITUATION * st, u16 warp_id)
Set void Situation_SetCameraID(SITUATION * st, int camera_id)
Chk SITUATION * SaveData_GetSituation(SAVEDATA * sv)
File /src/savedata/zukanwork.c
Label GMDATA_ID_ZUKANWORK
Set ZUKAN_WORK * ZukanWork_AllocWork(u32 heapID)
Set static inline void set_bit(u8 * array, u16 flag_id)
Set static inline void setnum_bit(u8 * array, u8 num, u16 flag_id)
Set static u16 count_bit(const u32 * array, u32 array_max)
Set static inline void setnum_bit2(u8 * array, u8 num, u16 flag_id)
Set static inline void SetZukanRandom(ZUKAN_WORK * zw, u16 monsno, u32 rand)
Set static void SetZukanUnknownTurn( ZUKAN_WORK * zw, int form)
Set static void setDeokisisuFormNoCore( u32* p_arry, u8 no, u8 num )
#育てやセーブデータはフラット構造をしていない為
#File /src/savedata/sodateyadata.c
#Label GMDATA_ID_SODATEYA
#Set sw void SodateyaWork_Init(SODATEYA_WORK * sw)
#Set sw void SodateyaWork_CopyPokePasoParam( SODATEYA_WORK *sw, const POKEMON_PARAM *pp, int no )
File /src/savedata/friendlist.c
Label GMDATA_ID_FRIEND
Set void FriendList_Init( FRIEND_LIST * flist )
Chk FRIEND_LIST *SaveData_GetFriendList(SAVEDATA * sv)
Set void FriendList_SetName(FRIEND_LIST * flist, int no, const STRCODE * name)
Set void FriendList_SetID(FRIEND_LIST * flist, int no, u32 id)
Set void  FriendList_SetRomCode( FRIEND_LIST * flist, int no, u8 rom )
Set void FriendList_SetSex(FRIEND_LIST * flist, int no, u32 sex)
Set void  FriendList_SetGroupListId( FRIEND_LIST * flist , int no, u32 id )
Set void  FriendList_SetGroupListRomCode( FRIEND_LIST * flist , int no, u8 rom )
Set void  FriendList_SetGroupListRegion( FRIEND_LIST * flist , int no, u8 code )
Set void  FriendList_SetGroupListSex( FRIEND_LIST * flist , int no, u8 code )
Set void FriendList_Update( FRIEND_LIST *mylist, FRIEND_LIST *friends, int num, int heapID)
Set void Debug_FriendList_Make(FRIEND_LIST * flist, const STRCODE * name, int id )
File /src/savedata/misc.c
Label GMDATA_ID_MISC
Set void MISC_Init(MISC * misc)
Chk MISC * SaveData_GetMisc(SAVEDATA * sv)
Chk const MISC * SaveData_GetMiscReadOnly(const SAVEDATA * sv)
Set void MISC_SetRivalName(MISC * misc, STRBUF * str)
Set void MISC_SetMonumentName(MISC * misc, STRBUF * str)
Set void MISC_SetExtraInitFlag(MISC * misc)
Set void MISC_ClearExtraInitFlag(MISC * misc)
File /src/field/situation.c
Label GMDATA_ID_FIELDOBJSV
Set void FieldObjSv_Init(FIELDOBJ_SAVE * sv)
Set void Field_SaveFieldObj(FIELDSYS_WORK * fsys)
Chk FIELDOBJ_SAVE * SaveData_GetFieldObjSv(SAVEDATA * sv)
File /src/savedata/undergrounddata.c
Label GMDATA_ID_UNDERGROUNDDATA
Set void UnderGroundData_Init(UNDERGROUNDDATA* pSBData)
Set void UnderGroundDataDayUpdate(SAVEDATA* pSave, int diff_days)
Set void UnderGroundDataMinUpdate(SAVEDATA* pSave, s32 diff_minute, BOOL bPenaltyMode)
Set void UnderGroundDataLoadUpdate(SAVEDATA* pSave)
Set void UnderGroundDataBeforeUGSave(SAVEDATA* pSave)
Set void UnderGroundDataAfterUG(SAVEDATA* pSave)
Set void UnderGroundSetDiamondPearlEvent(UNDERGROUNDDATA* pUGData)
Set void UnderGroundAddFlag(UNDERGROUNDDATA* pUGData, const MYSTATUS* pMyStatus)
Set int UnderGroundGetTreasureBagItem(UNDERGROUNDDATA* pUGData, BOOL bDelete)
Set BOOL UnderGroundAddGoodsPCItem(UNDERGROUNDDATA* pUGData, int goodsNo)
Set int UnderGroundDelGoodsPCItem(UNDERGROUNDDATA* pUGData, int listIndex)
Set void UnderGroundChangeGoodsPcItem(UNDERGROUNDDATA* pUGData, int listIndex,int nextIndex)
Set int UnderGroundEntryGoodsPCItem(UNDERGROUNDDATA* pUGData, int listIndex, int goodsIndex)
Set void UnderGroundTrashGoodsPCItem(UNDERGROUNDDATA* pUGData, int goodsIndex)
Set void UnderGroundTrashAllGoodsPCItem(UNDERGROUNDDATA* pUGData)
Set static void _addEntryGoodsPCItem(UNDERGROUNDDATA* pUGData, int listIndex, int add)
Set int UnderGroundDelGoodsBagItem(UNDERGROUNDDATA* pUGData, int listIndex)
Set BOOL UnderGroundAddGoodsBagItem(UNDERGROUNDDATA* pUGData, int goodsType)
Set void UnderGroundChangeGoodsBagItem(UNDERGROUNDDATA* pUGData, int listIndex,int nextIndex)
Set int UnderGroundDelStoneBagItem(UNDERGROUNDDATA* pUGData, int listIndex)
Set void UnderGroundChangeStoneBagItem(UNDERGROUNDDATA* pUGData, int listIndex,int nextIndex)
Set int UnderGroundDelTreasureBagItem(UNDERGROUNDDATA* pUGData, int listIndex)
Set BOOL UnderGroundAddTreasureBagItem(UNDERGROUNDDATA* pUGData, int treasureType)
Set void UnderGroundChangeTreasureBagItem(UNDERGROUNDDATA* pUGData, int listIndex,int nextIndex)
Set int UnderGroundDelTrapBagItem(UNDERGROUNDDATA* pUGData, int listIndex)
Set BOOL UnderGroundAddTrapBagItem(UNDERGROUNDDATA* pUGData, int trapType)
Set void UnderGroundChangeTrapBagItem(UNDERGROUNDDATA* pUGData, int listIndex,int nextIndex)
Set void UnderGroundAddNatureTrapGroundItem(UNDERGROUNDDATA* pUGData, int trapType,int index, int x,int z)
Set void UnderGroundDelNatureTrapGroundItem(UNDERGROUNDDATA* pUGData, int index)
Set void UnderGroundAddTrapGroundItem(UNDERGROUNDDATA* pUGData, int trapType,int index, int x,int z,int order)
Set void UnderGroundAddStoneGroundItem(UNDERGROUNDDATA* pUGData, int stoneType,int index, int x,int z,int carat, int addCarat)
Set int UnderGroundAddFossilGroundItem(UNDERGROUNDDATA* pUGData, int x,int z)
Set void UnderGroundSetFirstFossil(UNDERGROUNDDATA* pUGData)
Set void UnderGroundResetNewDay(UNDERGROUNDDATA* pUGData)
Set void UnderGroundSetFossilDig(UNDERGROUNDDATA* pUGData,int type)
Set void UnderGroundCountWalk(UNDERGROUNDDATA* pUGData)
Set void SecretBaseData_Init(SECRETBASEDATA* pSBData)
Set void SecretBaseData_Reform(SECRETBASEDATA* pSBData)
Set void SecretBaseData_SetMakeDown(SECRETBASEDATA* pSBData)
Set void SecretBaseData_SetGoodsPosition(SECRETBASEDATA* pSBData, int goodsIndex, int type, int x, int z)
Set void SecretBaseRecordSetPoint(SB_RECORD_DATA* pSBRecord, int add)
Set void SecretBaseRecordSetTalkNum(SB_RECORD_DATA* pSBRecord, int meetNetID)
Set void SecretBaseRecordSetSendItemNum(SB_RECORD_DATA* pSBRecord)
Set void SecretBaseRecordSetFlagConquerNum(SB_RECORD_DATA* pSBRecord)
Set void SecretBaseRecordSetFlagDeliveryNum(SB_RECORD_DATA* pSBRecord)
Set void SecretBaseRecordSetStoneNum(SB_RECORD_DATA* pSBRecord, int add)
Set void SecretBaseRecordSetFossilNum(SB_RECORD_DATA* pSBRecord, int add)
Set void SecretBaseRecordSetTreasureNum(SB_RECORD_DATA* pSBRecord, int add)
Set void SecretBaseRecordSetTrapConquerNum(SB_RECORD_DATA* pSBRecord)
Set void SecretBaseRecordSetTrapTumbleNum(SB_RECORD_DATA* pSBRecord)
Set void SecretBaseRecordSetTrapRescueNum(SB_RECORD_DATA* pSBRecord)
Set void SecretBaseRecordSetItemRecvNum(SB_RECORD_DATA* pSBRecord)
Set void SecretBaseRecordSetFlagStealNum(SB_RECORD_DATA* pSBRecord)
Set void SecretBaseRecordSetFlagReverseNum(SB_RECORD_DATA* pSBRecord)
Set void SecretBaseRecordSetRelocateNum(SB_RECORD_DATA* pSBRecord)
Chk SECRETBASEDATA* SaveData_GetSecretBaseData(SAVEDATA * sv)
Chk SB_RECORD_DATA* SaveData_GetSecretBaseRecord(SAVEDATA * sv)
Chk SB_RECORD_DATA* SecretBaseGetSecretBaseRecord(SECRETBASEDATA* pSec)
Chk UNDERGROUNDDATA* SaveData_GetUnderGroundData(SAVEDATA * sv)
Set void Debug_UnderGroundData_AddTreasure(UNDERGROUNDDATA* pUGData, int type)
Set void Debug_SecretBaseData_AddGoods(SECRETBASEDATA* pSBData, int goodsType, int x, int z)
File /src/savedata/regulation.c
Label GMDATA_ID_REGULATION
Set void RegulationData_Init(REGULATION_DATA* pRegData)
Set void Regulation_SetCupName(REGULATION* pReg, const STRBUF *pCupBuf)
Set STRBUF* Regulation_CreateCupName(const REGULATION* pReg, int heapID) 
Set BOOL Regulation_SetParam(REGULATION* pReg, REGULATION_PARAM_TYPE type, int param)
Set SaveData_SetRegulation(SAVEDATA* pSave, const REGULATION* pReg)
File /src/savedata/imageclip_data.c
Label GMDATA_ID_IMAGECLIPDATA
Set static inline void clean_television_savedata( IMC_TELEVISION_SAVEDATA* wk )
Set static inline void clean_contest_savedata( IMC_CONTEST_SAVEDATA* wk )
Set static void ImcSaveData_SetPokeData_Local_Core( IMC_SAVEDATA_POKEMON* p_pokemon, POKEMON_PARAM* pp, u8 x, u8 y, s8 pri )
Set static void ImcSaveData_SetTrData_Local( IMC_SAVEDATA_POKEMON* p_pokemon, const STRBUF* pbuff, int sex )
Set static void imcsacedata_GetPokePara_Local( const IMC_SAVEDATA_POKEMON* p_pokemon, POKEMON_PARAM* pp )
Set static void imcsavedata_SetAcce_Local( IMC_SAVEDATA_ACCESSORIE* p_acce, u8 acce_no, u8 x, u8 y, u8 pri )
Set static void imcsavedata_Acce9Set( u32* p_arry, u8 set_data, u8 idx )
Set static void imcsavedata_1bitArry_set( u32* p_arry, u8 set_data, u8 idx )
Set static void imcsavedata_BGArry_set( u32* p_arry, u8 set_data, u8 idx )
Set static void clean_item_savedata( IMC_ITEM_SAVEDATA* wk )
Set void ImcSaveData_Init(IMC_SAVEDATA * iw)
Chk IMC_TELEVISION_SAVEDATA* ImcSaveData_GetTelevisionSaveData(IMC_SAVEDATA* iw, int no)
Chk IMC_CONTEST_SAVEDATA* ImcSaveData_GetContestSaveData(IMC_SAVEDATA* iw, int no)
Chk IMC_ITEM_SAVEDATA* ImcSaveData_GetItemSaveData(IMC_SAVEDATA* iw)
Set void ImcSaveData_SetAcceFlag( IMC_ITEM_SAVEDATA* p_iow, u32 acce_no, u32 num )
Set void ImcSaveData_AddAcceFlag( IMC_ITEM_SAVEDATA* p_iow, u32 acce_no, u32 num )
Set void ImcSaveData_SubAcceFlag( IMC_ITEM_SAVEDATA* p_iow, u32 acce_no, u32 num )
Set void ImcSaveData_SetBGFlag( IMC_ITEM_SAVEDATA* p_iow, u32 bg_no )
Set void ImcSaveData_SetComplateFlagTelevisionData(IMC_TELEVISION_SAVEDATA* iow)
Set void ImcSaveData_ClaenTelevisionData(IMC_TELEVISION_SAVEDATA* iow)
Set void ImcSaveData_SetTelevisionPokeData(IMC_TELEVISION_SAVEDATA* iow, POKEMON_PARAM* pp, IMC_POKE* ip)
Set void ImcSaveData_SetTelevisionAcceData(IMC_TELEVISION_SAVEDATA* iow, const IMC_ACCESSORIE_OBJ* ao, int no)
Set void ImcSaveData_SetTelevisionBgId(IMC_TELEVISION_SAVEDATA* iow, u8 bg)
Set void ImcSaveData_SetTelevisionTitle( IMC_TELEVISION_SAVEDATA* iow, const PMS_DATA* str )
Set void ImcSaveData_SetTelevisionTitlePmsWord( IMC_TELEVISION_SAVEDATA* iow, PMS_WORD word )
Set void ImcSaveData_CopyTelevision( IMC_TELEVISION_SAVEDATA* iow, const IMC_TELEVISION_SAVEDATA* set_iow )
Set void ImcSaveData_SetTelevisionTrData( IMC_TELEVISION_SAVEDATA* iow, const STRBUF* pbuff, int sex )
Set BOOL ImcSaveData_CheckTelevisionAcceDataSet(const IMC_TELEVISION_SAVEDATA* iow, int no)
Set void ImcSaveData_SetComplateFlagContestData(IMC_CONTEST_SAVEDATA* iow)
Set void ImcSaveData_ClaenContestData(IMC_CONTEST_SAVEDATA* iow)
Set void ImcSaveData_SetContestPokeData(IMC_CONTEST_SAVEDATA* iow, POKEMON_PARAM* pp, IMC_POKE* ip)
Set void ImcSaveData_SetContestAcceData(IMC_CONTEST_SAVEDATA* iow, const IMC_ACCESSORIE_OBJ* ao, int no)
Set void ImcSaveData_SetContestBgId(IMC_CONTEST_SAVEDATA* iow, u8 bg)
Set void ImcSaveData_SetContestRank(IMC_CONTEST_SAVEDATA* iow, u32 rank_code)
Set void ImcSaveData_CopyContest( IMC_CONTEST_SAVEDATA* iow, const IMC_CONTEST_SAVEDATA* set_iow )
Set void ImcSaveData_SetContestPokeData_Easy( IMC_CONTEST_SAVEDATA* iow, POKEMON_PARAM* pp, s8 pri )
Set void ImcSaveData_SetContestAcceData_Easy( IMC_CONTEST_SAVEDATA* iow, u32 acce_idx, u8 acce_no, u8 x, u8 y, s8 pri )
Set void ImcSaveData_SetContestTrData( IMC_CONTEST_SAVEDATA* iow, const STRBUF* pbuff, int sex )
Set void ImcSaveData_RecordMix( u8 datanum, int myid, IMC_SAVEDATA* iw, const void** cpp_arry )
Chk IMC_SAVEDATA * SaveData_GetImcSaveData(SAVEDATA * sv)
Set void Debug_ImcSaveData_Make(IMC_SAVEDATA * iw, int option)
Set void Debug_ImcSaveData_SetItemData(IMC_ITEM_SAVEDATA* iow)
Set static void debug_PokeDataSet( IMC_SAVEDATA_POKEMON* p_poke, POKEMON_PARAM* p_pp )
Set static void debug_AcceDataSet( IMC_SAVEDATA_ACCESSORIE* p_acce, u32 rnd )
Set void Debug_ImcSaveData_MakeTelevisionDummyData(IMC_TELEVISION_SAVEDATA* iow, POKEMON_PARAM* p_pp, u32 acce_num )
Set void Debug_ImcSaveData_MakeContestDummyData(IMC_CONTEST_SAVEDATA* iow, POKEMON_PARAM* p_pp, u32 acce_num, u32 rank_code )
File /src/savedata/mail.c
Label GMDATA_ID_MAILDATA
Set void MailData_Clear(MAIL_DATA* dat)
Set void MailData_Copy(MAIL_DATA* src,MAIL_DATA* dest)
Set void MailData_CreateFromSaveData(MAIL_DATA* dat,u8 design_no,u8 pos,SAVEDATA* save)
Set void MailData_SetWriterID(MAIL_DATA* dat,u32 id)
Set void MailData_SetWriterName(MAIL_DATA* dat,STRCODE* name)
Set void MailData_SetWriterSex(MAIL_DATA* dat,const u8 sex)
Set void MailData_SetDesignNo(MAIL_DATA* dat,const u8 design)
Set void MailData_SetCountryCode(MAIL_DATA* dat,const u8 code)
Set void MailData_SetCasetteVersion(MAIL_DATA* dat,const u8 version)
Set void MailData_SetIconParamByIndex(MAIL_DATA* dat,u16 id,u8 index,u8 mode)
Set void MailData_SetMsgByIndex(MAIL_DATA* dat,PMS_DATA* pms,u8 index)
Chk MAIL_BLOCK* SaveData_GetMailBlock(SAVEDATA* sv)
File /src/savedata/poruto.c
Label GMDATA_ID_PORUTODATA
Set void PorutoData_Clear(PORUTO_DATA* dat)
Set void PorutoData_Copy(PORUTO_DATA* src,PORUTO_DATA* dest)
Set void PorutoData_SetParam(PORUTO_DATA* dat,u8 valid,PORUTO_PARAID id)
Set static void porudata_MakeNoGoodPoruto(PORUTO_DATA *dat,u8 taste)
Set PORUTO_FLAVORID PorutoData_CalcParam(PORUTO_DATA* dat,u8 *prm,u8 taste,BOOL mazui)
Chk PORUTO_BLOCK* SaveData_GetPorutoBlock(SAVEDATA* sv)
File /src/savedata/randomgroup.c
Label GMDATA_ID_RANDOMGROUP
Set void RandomGroup_Copy( RANDOM_GROUP *randomgroup, int from, int to )
Set void RandomGroup_Init(RANDOM_GROUP * randomgroup )
Set void RandomGroup_Update(RANDOM_GROUP * randomgroup, u32 days)
Set void  RandomGroup_SetRandomSeed( RANDOM_GROUP* randomgroup, int no, u32 seed )
Set void RandomGroup_SetRandom( RANDOM_GROUP* randomgroup, int no )
Set void  RandomGroup_SetName( RANDOM_GROUP *randomgroup, int no, int type, STRBUF *str )
Set void RandomGroup_SetSex( RANDOM_GROUP *randomgroup, int no, int sex)
Set void RandomGroup_SetRegionCode( RANDOM_GROUP *randomgroup, int no, int region_code )
Chk RANDOM_GROUP *SaveData_GetRandomGroup(SAVEDATA * sv)
File /src/savedata/fnote_mem.c
Label GMDATA_ID_FNOTE
Set static void FNOTE_Init( FNOTE_DATA * dat )
Set void FNOTE_InitAll( FNOTE_DATA * dat )
Chk FNOTE_DATA * SaveData_GetFNote( SAVEDATA * sv )
Set void FNOTE_DataSave( FNOTE_DATA * dat, void * wk, u8 type )
Set static void FNOTE_StartDataSave( FNOTE_DATA * dat, FNOTE_WK_START * wk )
Set static void FNOTE_ActionDataSave( FNOTE_DATA * dat, FNOTE_WK_ACTION * wk )
Set static void FNOTE_SioDataSave( FNOTE_DATA * dat, FNOTE_WK_SIO * wk )
Set static void FNOTE_ActionIDDataSave( u32 * dat, FNOTE_WK_ACTION * wk )
Set static void FNOTE_ActionTrainerDataSave( u32 * dat, FNOTE_WK_ACTION * wk )
Set static void FNOTE_ActionSitennouDataSave( u32 * dat, FNOTE_WK_ACTION * wk )
Set static void FNOTE_ActionGymLeaderDataSave( u32 * dat, FNOTE_WK_ACTION * wk )
Set static void FNOTE_ActionMapDataSave( u32 * dat, FNOTE_WK_ACTION * wk )
Set static void FNOTE_ActionItemDataSave( u32 * dat, FNOTE_WK_ACTION * wk )
Set void * FNOTE_StartDataMake( u16 start, u32 heap )
Set void * FNOTE_ActionHouseDataMake( u32 heap )
Set void * FNOTE_ActionLaboDataMake( u32 heap )
Set void * FNOTE_ActionShopBuyDataMake( u32 heap )
Set void * FNOTE_ActionShopBuy2DataMake( u32 heap )
Set void * FNOTE_ActionShopSaleDataMake( u32 heap )
Set void * FNOTE_ActionShopSale2DataMake( u32 heap )
Set void * FNOTE_ActionShopTradeDataMake( u32 heap )
Set void * FNOTE_ActionGymBeforeDataMake( u16 map, u32 heap )
Set void * FNOTE_ActionGymAfterDataMake( u16 map, u16 trainer, u32 heap )
Set void * FNOTE_ActionSitenouDataMake( u16 trainer, u32 heap )
Set void * FNOTE_ActionChampionDataMake( u16 trainer, u32 heap )
Set void * FNOTE_ActionCityDataMake( u16 map, u32 heap )
Set void * FNOTE_ActionDungeonDataMake( u16 map, u32 heap )
Set void * FNOTE_ActionBuildDataMake( u16 map, u32 heap )
Set void * FNOTE_ActionGameCornerDataMake( u32 heap )
Set void * FNOTE_ActionSafariDataMake( u32 heap )
Set void * FNOTE_ActionItemDataMake( u16 item, u32 heap )
Set void * FNOTE_ActionSkillDataMake( u8 waza, u16 map, u32 heap )
Set void * FNOTE_ActionUGFossilDataMake( u32 heap )
Set void * FNOTE_ActionUGBaseDataMake( u32 heap )
Set void * FNOTE_PokemonGetDataMake( const PLAYTIME * ptime, u16 mons, u8 sex, u8 time, u32 heap )
Set void * FNOTE_PokemonDownDataMake( const PLAYTIME * ptime, u16 mons, u8 sex, u8 time, u32 heap )
Set void * FNOTE_TrainerDataMake( u16 map, u16 trainer, u32 heap )
Set void * FNOTE_SioSingleBtlDataMake( STRCODE * name, u8 sex, u8 result, u32 heap )
Set void * FNOTE_SioDoubleBtlDataMake( STRCODE * name, u8 sex, u8 result, u32 heap )
Set void * FNOTE_SioMultiBtlDataMake(
Set void * FNOTE_SioMixBtl1DataMake( STRCODE * name, u8 sex, u8 result, u32 heap )
Set void * FNOTE_SioMixBtl2DataMake(
Set void * FNOTE_SioUnionGreetDataMake( STRCODE * name, u8 sex, u32 heap )
Set void * FNOTE_SioUnionChangeDataMake(
Set void * FNOTE_SioUnionPictureDataMake( u32 heap )
Set void * FNOTE_SioUnionMltChgDataMake( STRCODE * nickname, u8 poke_sex, u32 heap )
Set void * FNOTE_SioUnionTransceiverDataMake( u32 heap )
Set void * FNOTE_SioUnionBattleDataMake( STRCODE * name, u8 sex, u8 result, u32 heap )
Set void * FNOTE_SioRecordDataMake( u32 heap )
Set void * FNOTE_SioContestDataMake( u8 result, u32 heap )
Set void * FNOTE_SioPorutoDataMake( u32 heap )
Set void * FNOTE_SioGTCDataMake( STRCODE * name, u8 sex, STRCODE * nickname, u8 poke_sex, u32 heap )
Set void * FNOTE_SioBattleTowerDataMake( u32 heap )
File /src/savedata/trainercard_data.c
Label GMDATA_ID_TRCARD
Set void TRCSave_InitSaveData(TR_CARD_SV_PTR outTrCard)
Chk TR_CARD_SV_PTR TRCSave_GetSaveDataPtr(SAVEDATA * sv)
Set void TRCSave_SetBadgeScruchCount(const u8 inBadgeNo, const int inCount, TR_BADGE_DATA_PTR outBadgeDataPtr)
File /src/savedata/record.c
Label GMDATA_ID_RECORD
Set void RECORD_Init(RECORD * rec)
Chk RECORD * SaveData_GetRecord(SAVEDATA * sv)
Set u32 RECORD_Set(RECORD * rec, int id, u32 value)
Set u32 RECORD_SetIfLarge(RECORD * rec, int id, u32 value)
Set u32 RECORD_Inc(RECORD * rec, int id)
Set u32 RECORD_Add(RECORD * rec, int id, u32 add_value)
Set void RECORD_Score_Add(RECORD * rec, int id)
Set void RECORD_Score_AddZukanScore(RECORD * rec, const ZUKAN_WORK * zw, u16 const inMonsno)
Set void RECORD_Score_DebugSet(RECORD * rec, const u32 inScore)
File /src/savedata/custom_ball.c
Label GMDATA_ID_CUSTOM_BALL
Set void CustomBall_Init(CB_SAVE_DATA* csd)
Set void CB_Tool_SaveData_Copy(const CB_SAVE_DATA* from, CB_SAVE_DATA* to)
Set void CB_Tool_CoreData_Copy(const CB_CORE* from, CB_CORE* to)
Set void CB_Tool_SealData_Copy(const CB_SEAL* from, CB_SEAL* to)
Chk CB_SAVE_DATA* CB_SaveData_AllDataGet(SAVEDATA* sv)
Set void CB_SaveData_CoreDataSet(CB_SAVE_DATA* save, CB_CORE* core, int no)
Set void CB_SaveData_SealDataSet(CB_CORE* core, CB_SEAL* seal, int no)
Set void CB_SaveData_ItemNumSet(CB_ITEM_DATA* item, int no, int stock)
Set void CB_SaveData_ItemNumAdd(CB_ITEM_DATA* save, int no, s16 stock)
Set void Debug_CB_SaveData_Poke_Sample(SAVEDATA * save, int mode)
Set void Debug_CB_SaveData_Sample(CB_SAVE_DATA* save, int mode)
Set void Debug_CB_Set(POKEMON_PARAM* pp)
Set BOOL CB_SaveData_ItemNumAddCheck(CB_SAVE_DATA* save, int no, s16 stock)
Set BOOL CB_SaveData_ItemNumAddCheck_CBO(CB_SAVE_DATA* save, int no, s16 stock)
File /src/savedata/perapvoice.c
Label GMDATA_ID_PERAPVOICE
Set void PERAPVOICE_Init(PERAPVOICE * pv)
Chk PERAPVOICE * SaveData_GetPerapVoice(SAVEDATA * sv)
Set void PERAPVOICE_ClearExistFlag( PERAPVOICE * pv )
Set void PERAPVOICE_SetVoiceData(PERAPVOICE * pv, const s8 * src)
Set void PERAPVOICE_CopyData(PERAPVOICE * des, const PERAPVOICE * src)
File /src/savedata/frontier_savedata.c
Label GMDATA_ID_FRONTIER
Set void FrontierData_Init(FRONTIER_SAVEWORK* save)
Chk FRONTIER_SAVEWORK * SaveData_GetFrontier(SAVEDATA * sv)
Set u16 FrontierRecord_Set(FRONTIER_SAVEWORK* save, int id, int friend_no, u16 data)
Set u16 FrontierRecord_Add(FRONTIER_SAVEWORK* save, int id, int friend_no, int add_value)
Set u16 FrontierRecord_Sub(FRONTIER_SAVEWORK* save, int id, int friend_no, int sub_value)
Set u16 FrontierRecord_Inc(FRONTIER_SAVEWORK* save, int id, int friend_no)
Set u16 FrontierRecord_SetIfLarge(FRONTIER_SAVEWORK *save, int id, int friend_no, u16 data)
## File /src/savedata/sp_ribbon.c
## Label GMDATA_ID_SP_RIBBON
## Set void SP_RIBBON_Init( u8 * dat )
## Chk u8 * SaveData_GetSpRibbon( SAVEDATA * sv )
File /src/savedata/encount.c
Label GMDATA_ID_ENCOUNT
Set void EncDataSave_InitSaveData(ENC_SV_PTR outEncData)
Set void EncDataSave_UpdateRandSeed(ENC_SV_PTR ioEncData, const u32 inRandSeed)
Chk ENC_SV_PTR EncDataSave_GetSaveDataPtr(SAVEDATA * sv)
Set void HTSave_SetBeforeTreeNo(const u8 inTreeNo, HT_PTR outPtr)
Set void HTSave_UpdateHoneyTreeTime(SAVEDATA * sv,  const int inDiffMinute)
Set void EncDataSave_StartGenerate( SAVEDATA * sv )
Set void EncDataSave_UpdatePlayerZoneHist(ENC_SV_PTR ioEncData, const int inZoneID)
Set void EncDataSave_SetMovePokeZoneIdx(ENC_SV_PTR outEncData, const u8 inTargetPoke, const u8 inZoneIndex)
Set void EncDataSave_ClearMovePokeData(MPD_PTR *outMPData)
Set void EncDataSave_SetMovePokeDataParam(MPD_PTR outMPData, const u8 inParamID, const u32 inVal)
Set void EncDataSave_SetVidro(ENC_SV_PTR outEncData, const u8 inType)
Set void EncDataSave_SetHillBackPokeIdx(SAVEDATA *sv, const u16 inIndex)
## chkはsavedata.c
File /src/savedata/tv_work.c
Label GMDATA_ID_TVWORK
Set void TVWORK_Init(TV_WORK * tv)
Set void TVWORK_ClearMyTopic(TV_WORK * tvwk)
Set void TVWORK_ClearOtherTopic(TV_WORK * tvwk)
Set void TVWORK_UpdateMinuteCount(TV_WORK * tvwk, int min_diff, int now_minute)
Set void TVWORK_StartProgram(TV_WORK * tvwk)
Set void TVWORK_SetProgramEnd(TV_WORK * tvwk, BOOL flag)
Set void TVWORK_SetUsedTopicIndex(TV_WORK * tvwk, int index)
Set BOOL TVWORK_MakeTopic(TV_WORK * tvwk, TVTOPICTYPE topic_type, int topic_id, const u8 * data)
Set void TVTOPIC_CountUpBroadcast(TVTOPIC * topic)
File /src/savedata/guinness.c
Label GMDATA_ID_GUINNESS
Set void GNS_DataClear(GUINNESS_DATA* dat)
Set void GNS_DataCopy(const GUINNESS_DATA* src,GUINNESS_DATA* dest)
Set void GuinnessData_Init(GUINNESS* dat)
Chk GUINNESS* SaveData_GetGuinnessData(SAVEDATA* sv)
Set void GuinnessData_DelRecord(GUINNESS* dat,GNSID id,u8 idx)
Set static u32* guinness_AllocMyRecord(SAVEDATA* sv,int heapID)
Set void* GuinnessRecord_SendDataAlloc(SAVEDATA* sv,int heapID)
Set void GuinnessRecord_RecvDataMix(SAVEDATA* sv,int myid,u8 datanum,const void** array,int heapID)
Set void GNSRank_FreeRankingData(GNS_RANKING* dat)
Set void GNSRank_SetRankingData(GUINNESS* gns,GNSID id,GNS_RANKING* dat)
File /src/savedata/wifihistory.c
Label GMDATA_ID_WIFIHISTORY
Set void WIFIHISTORY_Init(WIFI_HISTORY * hist)
Chk WIFI_HISTORY * SaveData_GetWifiHistory(SAVEDATA * sv)
Set void WIFIHISTORY_SetMyNationArea(WIFI_HISTORY * wh, int nation, int area)
Set void WIFIHISTORY_SetStat(WIFI_HISTORY * wh, int nation, int area, WIFIHIST_STAT stat)
Set void WIFIHISTORY_SetWorldFlag(WIFI_HISTORY * wh, BOOL flag)
Set void WIFIHISTORY_Update(WIFI_HISTORY * wh)
## chkはsavedata.c
File /src/savedata/fushigi_data.c
Label GMDATA_ID_FUSHIGIDATA
Set void FUSHIGIDATA_Init(FUSHIGI_DATA * fd)
Set BOOL FUSHIGIDATA_SetDeliData(FUSHIGI_DATA *fd, const void *p, int link)
Set BOOL FUSHIGIDATA_SetCardData(FUSHIGI_DATA *fd, const void *p)
Set BOOL FUSHIGIDATA_RemoveDeliData(FUSHIGI_DATA *fd, int index)
Set BOOL FUSHIGIDATA_RemoveCardData(FUSHIGI_DATA *fd, int index)
Set void FUSHIGIDATA_SetEventRecvFlag(FUSHIGI_DATA * fd, int num)
Set void FUSHIGIDATA_InitSlot(SAVEDATA * sv, int heap_id)
Set void FUSHIGIDATA_DebugSetPokemon(void)
File /src/savedata/savedata.c
Label GMDATA_ID_FUSHIGIDATA
Chk FUSHIGI_DATA * SaveData_GetFushigiData(SAVEDATA * sv)
File /src/savedata/savedata.c
Label GMDATA_ID_TVWORK
Chk TV_WORK * SaveData_GetTvWork(SAVEDATA * sv)
File /src/savedata/contest_savedata.c
Label GMDATA_ID_CONTEST
Set void CONDATA_Init(CONTEST_DATA * condata)
Set void CONDATA_RecordAdd(SAVEDATA *sv, int type, int ranking)
Chk u16 CONDATA_GetValue(SAVEDATA *sv, int type, int ranking)
File /src/system/pms_word.c
Label GMDATA_ID_PMS
Set void PMSW_InitSaveData( void* wk_ptr )
Chk PMSW_SAVEDATA* SaveData_GetPMSW( SAVEDATA* sv )
Set u32 PMSW_SetNewNankaiWord( PMSW_SAVEDATA* saveData )
Set void PMSW_SetAisatsuFlag( PMSW_SAVEDATA* saveData, PMSW_AISATSU_ID id )
File /src/savedata/email_savedata.c
Label GMDATA_ID_EMAIL
Set void EMAILSAVE_Init(EMAIL_SAVEDATA * emaildata)
Set void EMAILSAVE_AddressSet(SAVEDATA *sv, const char *address)
Set void EMAILSAVE_ParamSet(SAVEDATA *sv, int param_id, u32 data)
Set static void EMAILSAVE_DCProfileCreateCommon(SAVEDATA *sv, Dpw_Common_Profile *dc_profile)
Set u32 EMAILSAVE_DCProfileCreate_AuthStart(SAVEDATA *sv, Dpw_Common_Profile *dc_profile)
Set void EMAILSAVE_DCProfileCreate_Update(SAVEDATA *sv, Dpw_Common_Profile *dc_profile)
File /src/savedata/roulette_savedata.c
Label GMDATA_ID_FRONTIER
Set void ROULETTEDATA_Init( ROULETTEDATA* wk )
Chk ROULETTEDATA * SaveData_GetRouletteData( SAVEDATA * sv )
Set void ROULETTEDATA_InitPlayData( ROULETTEDATA* wk )
Set void ROULETTEDATA_SetSaveFlag( ROULETTEDATA* wk, BOOL flag )
Set void ROULETTEDATA_PutPlayData( ROULETTEDATA* wk, u8 id, u8 param, u8 param2, const void* buf )
Set void ROULETTESCORE_Init( ROULETTESCORE* wk )
Set void ROULETTESCORE_PutScoreData( ROULETTESCORE* wk, u8 id, u8 param, u8 param2, const void* buf )
File /src/field/ev_time.c
Label GMDATA_ID_SYSTEM_DATA
Set static void UpdateDateCheck(FIELDSYS_WORK * fsys, GMTIME * tm, const RTCDate * now_date)
Set static void UpdateMinuteCheck(FIELDSYS_WORK * fsys, GMTIME * tm,
Set void EVTIME_SetGameClearDateTime(const FIELDSYS_WORK * fsys)
File /src/savedata/castle_savedata.c
Label GMDATA_ID_FRONTIER
Set void CASTLEDATA_Init( CASTLEDATA* wk )
Chk CASTLEDATA * SaveData_GetCastleData( SAVEDATA * sv )
Set void CASTLEDATA_SetSaveFlag( CASTLEDATA* wk, BOOL flag )
Set void CASTLEDATA_InitPlayData( CASTLEDATA* wk )
Set void CASTLEDATA_InitPlayData( CASTLEDATA* wk )
Set void CASTLEDATA_PutPlayData( CASTLEDATA* wk, u8 id, u8 param, u8 param2, const void* buf )
Set void CASTLESCORE_Init( CASTLESCORE* wk )
Set void CASTLESCORE_PutScoreData( CASTLESCORE* wk, u8 id, u8 param, u8 param2, const void* buf )
Chk CASTLESCORE * SaveData_GetCastleScore( SAVEDATA * sv )
File /src/savedata/factory_savedata.c
Label GMDATA_ID_FRONTIER
Set void FACTORYDATA_Init( FACTORYDATA* wk )
Chk FACTORYDATA * SaveData_GetFactoryData( SAVEDATA * sv )
Set void FACTORYDATA_InitPlayData( FACTORYDATA* wk )
Set void FACTORYDATA_SetSaveFlag( FACTORYDATA* wk, BOOL flag )
Set void FACTORYDATA_PutPlayData( FACTORYDATA* wk, u8 id, u8 param, const void* buf )
Set void FACTORYSCORE_Init( FACTORYSCORE* wk )
Set void FACTORYSCORE_PutScoreData( FACTORYSCORE* wk, u8 id, u8 param, const void* buf )
Chk FACTORYSCORE * SaveData_GetFactoryScore( SAVEDATA * sv )
File /src/savedata/stage_savedata.c
Label GMDATA_ID_FRONTIER
Set void STAGEDATA_Init( STAGEDATA* wk )
Chk STAGEDATA * SaveData_GetStageData( SAVEDATA * sv )
Set void STAGEDATA_InitPlayData( STAGEDATA* wk )
Set void STAGEDATA_SetSaveFlag( STAGEDATA* wk, BOOL flag )
Set void STAGEDATA_PutPlayData( STAGEDATA* wk, u8 id, u8 param, u8 param2, const void* buf )
Set void Stage_SetTypeLevel( u8 csr_pos, u8* p_rank, u8 num )
Set void Stage_ClearTypeLevel( u8* p_rank )
Set void STAGESCORE_Init( STAGESCORE* wk )
Set void STAGESCORE_ClearTypeLevel( STAGESCORE* wk, u8 type )
Chk STAGESCORE * SaveData_GetStageScore( SAVEDATA * sv )
Set void STAGESCORE_PutScoreData( STAGESCORE* wk, u8 id, u8 param, u8 param2, const void* buf )
File /src/savedata/gimmickwork.c
Label GMDATA_ID_MISC
Set void GIMMICKWORK_Init(GIMMICKWORK * gimmick)
Set void * GIMMICKWORK_Assign(GIMMICKWORK * gimmick, int gimmick_id)
File /src/savedata/b_tower.c
Label GMDATA_ID_FRONTIER
Set void TowerPlayData_Clear(BTLTOWER_PLAYWORK* dat)
Set void TowerScoreData_Clear(BTLTOWER_SCOREWORK* dat)
Set void TowerPlayerMsg_Clear(BTLTOWER_PLAYER_MSG* dat)
Set void TowerWifiData_Clear(BTLTOWER_WIFI_DATA* dat)
Set void TowerPlayData_Put(BTLTOWER_PLAYWORK* dat,BTWR_PSD_ID id,const void* buf)
Set void TowerPlayData_WifiRecordAdd(BTLTOWER_PLAYWORK* dat,u8 down,u16 turn,u16 damage)
Set void TowerPlayData_SetSaveFlag(BTLTOWER_PLAYWORK* dat,BOOL flag)
Set u16 TowerScoreData_SetBattlePoint(BTLTOWER_SCOREWORK* dat,u16 num,BTWR_DATA_SETID mode)
Set u8 TowerScoreData_SetWifiLoseCount(BTLTOWER_SCOREWORK* dat,BTWR_DATA_SETID mode)
Set u8	TowerScoreData_SetWifiRank(BTLTOWER_SCOREWORK* dat,BTWR_DATA_SETID mode)
Set void TowerScoreData_SetUsePokeData(BTLTOWER_SCOREWORK* dat,
Set u16	TowerScoreData_SetWifiScore(BTLTOWER_SCOREWORK* dat,BTLTOWER_PLAYWORK *playdata)
Set void TowerScoreData_ClearWifiScore(BTLTOWER_SCOREWORK* dat)
Set u16 TowerScoreData_SetStage(BTLTOWER_SCOREWORK* dat,u16 id,BTWR_DATA_SETID mode)
Set u16 TowerScoreData_DebugSetStageValue(BTLTOWER_SCOREWORK* dat,u16 id,u16 value)
Set BOOL	TowerScoreData_SetFlags(BTLTOWER_SCOREWORK* dat,u16 id,BTWR_DATA_SETID mode)
Set void TowerScoreData_SetDayRndSeed(BTLTOWER_SCOREWORK* dat,u32 rnd_seed)
Set void TowerPlayerMsg_Set(SAVEDATA* sv,BTWR_PLAYER_MSG_ID id,PMS_DATA* src)
Set void TowerWifiData_SetRoomDataFlag(BTLTOWER_WIFI_DATA* dat,
Set void TowerWifiData_ClearRoomDataFlag(BTLTOWER_WIFI_DATA* dat)
Set void TowerWifiData_SetPlayerData(BTLTOWER_WIFI_DATA* dat,DPW_BT_PLAYER* src,u8 rank,u8 roomno)
Set void TowerWifiData_ClearPlayerData(BTLTOWER_WIFI_DATA* dat)
Set void TowerWifiData_GetBtlPlayerData(BTLTOWER_WIFI_DATA* dat,
Set void TowerWifiData_SetLeaderData(BTLTOWER_WIFI_DATA* dat,DPW_BT_LEADER* src,u8 rank,u8 roomno)
Set void TowerWifiData_ClearLeaderData(BTLTOWER_WIFI_DATA* dat)
Chk BTLTOWER_PLAYWORK* SaveData_GetTowerPlayData(SAVEDATA* sv)
Chk BTLTOWER_SCOREWORK* SaveData_GetTowerScoreData(SAVEDATA* sv)
Chk BTLTOWER_WIFI_DATA*	SaveData_GetTowerWifiData(SAVEDATA* sv)
File /src/savedata/undergrounddata.c
Label GMDATA_ID_UNDERGROUNDDATA
Set void UnderGroundData_Init(UNDERGROUNDDATA* pSBData)
Set void UnderGroundDataDayUpdate(SAVEDATA* pSave, int diff_days)
Set void UnderGroundDataMinUpdate(SAVEDATA* pSave, s32 diff_minute, BOOL bPenaltyMode)
Set void UnderGroundDataLoadUpdate(SAVEDATA* pSave)
Set void UnderGroundDataBeforeUGSave(SAVEDATA* pSave)
Set void UnderGroundDataAfterUG(SAVEDATA* pSave)
Set void UnderGroundSetDiamondPearlEvent(UNDERGROUNDDATA* pUGData)
Set void UnderGroundAddFlag(UNDERGROUNDDATA* pUGData, const MYSTATUS* pMyStatus)
Set int UnderGroundGetTreasureBagItem(UNDERGROUNDDATA* pUGData, BOOL bDelete)
Set BOOL UnderGroundAddGoodsPCItem(UNDERGROUNDDATA* pUGData, int goodsNo)
Set int UnderGroundDelGoodsPCItem(UNDERGROUNDDATA* pUGData, int listIndex)
Set void UnderGroundChangeGoodsPcItem(UNDERGROUNDDATA* pUGData, int listIndex,int nextIndex)
Set int UnderGroundEntryGoodsPCItem(UNDERGROUNDDATA* pUGData, int listIndex, int goodsIndex)
Set void UnderGroundTrashGoodsPCItem(UNDERGROUNDDATA* pUGData, int goodsIndex)
Set void UnderGroundTrashAllGoodsPCItem(UNDERGROUNDDATA* pUGData)
Set static void _addEntryGoodsPCItem(UNDERGROUNDDATA* pUGData, int listIndex, int add)
Set int UnderGroundDelGoodsBagItem(UNDERGROUNDDATA* pUGData, int listIndex)
Set BOOL UnderGroundAddGoodsBagItem(UNDERGROUNDDATA* pUGData, int goodsType)
Set void UnderGroundChangeGoodsBagItem(UNDERGROUNDDATA* pUGData, int listIndex,int nextIndex)
Set int UnderGroundDelStoneBagItem(UNDERGROUNDDATA* pUGData, int listIndex)
Set void UnderGroundChangeStoneBagItem(UNDERGROUNDDATA* pUGData, int listIndex,int nextIndex)
Set int UnderGroundDelTreasureBagItem(UNDERGROUNDDATA* pUGData, int listIndex)
Set BOOL UnderGroundAddTreasureBagItem(UNDERGROUNDDATA* pUGData, int treasureType)
Set void UnderGroundChangeTreasureBagItem(UNDERGROUNDDATA* pUGData, int listIndex,int nextIndex)
Set int UnderGroundDelTrapBagItem(UNDERGROUNDDATA* pUGData, int listIndex)
Set BOOL UnderGroundAddTrapBagItem(UNDERGROUNDDATA* pUGData, int trapType)
Set void UnderGroundChangeTrapBagItem(UNDERGROUNDDATA* pUGData, int listIndex,int nextIndex)
Set void UnderGroundAddNatureTrapGroundItem(UNDERGROUNDDATA* pUGData, int trapType,int index, int x,int z)
Set void UnderGroundDelNatureTrapGroundItem(UNDERGROUNDDATA* pUGData, int index)
Set void UnderGroundAddTrapGroundItem(UNDERGROUNDDATA* pUGData, int trapType,int index, int x,int z,int order)
Set void UnderGroundAddStoneGroundItem(UNDERGROUNDDATA* pUGData, int stoneType,int index, int x,int z,int carat, int addCarat)
Set int UnderGroundAddFossilGroundItem(UNDERGROUNDDATA* pUGData, int x,int z)
Set void UnderGroundSetFirstFossil(UNDERGROUNDDATA* pUGData)
Set void UnderGroundResetNewDay(UNDERGROUNDDATA* pUGData)
Set void UnderGroundSetFossilDig(UNDERGROUNDDATA* pUGData,int type)
Set void UnderGroundCountWalk(UNDERGROUNDDATA* pUGData)
Set void SecretBaseData_Init(SECRETBASEDATA* pSBData)
Set void SecretBaseData_Reform(SECRETBASEDATA* pSBData)
Set void SecretBaseData_SetMakeDown(SECRETBASEDATA* pSBData)
Set void SecretBaseData_SetGoodsPosition(SECRETBASEDATA* pSBData, int goodsIndex, int type, int x, int z)
Set void SecretBaseRecordSetPoint(SB_RECORD_DATA* pSBRecord, int add)
Set void SecretBaseRecordSetTalkNum(SB_RECORD_DATA* pSBRecord, int meetNetID)
Set void SecretBaseRecordSetSendItemNum(SB_RECORD_DATA* pSBRecord)
Set void SecretBaseRecordSetFlagConquerNum(SB_RECORD_DATA* pSBRecord)
Set void SecretBaseRecordSetFlagDeliveryNum(SB_RECORD_DATA* pSBRecord)
Set void SecretBaseRecordSetStoneNum(SB_RECORD_DATA* pSBRecord, int add)
Set void SecretBaseRecordSetFossilNum(SB_RECORD_DATA* pSBRecord, int add)
Set void SecretBaseRecordSetTreasureNum(SB_RECORD_DATA* pSBRecord, int add)
Set void SecretBaseRecordSetTrapConquerNum(SB_RECORD_DATA* pSBRecord)
Set void SecretBaseRecordSetTrapTumbleNum(SB_RECORD_DATA* pSBRecord)
Set void SecretBaseRecordSetTrapRescueNum(SB_RECORD_DATA* pSBRecord)
Set void SecretBaseRecordSetItemRecvNum(SB_RECORD_DATA* pSBRecord)
Set void SecretBaseRecordSetFlagStealNum(SB_RECORD_DATA* pSBRecord)
Set void SecretBaseRecordSetFlagReverseNum(SB_RECORD_DATA* pSBRecord)
Set void SecretBaseRecordSetRelocateNum(SB_RECORD_DATA* pSBRecord)
Chk SECRETBASEDATA* SaveData_GetSecretBaseData(SAVEDATA * sv)
Chk SB_RECORD_DATA* SaveData_GetSecretBaseRecord(SAVEDATA * sv)
Chk SB_RECORD_DATA* SecretBaseGetSecretBaseRecord(SECRETBASEDATA* pSec)
Chk UNDERGROUNDDATA* SaveData_GetUnderGroundData(SAVEDATA * sv)
Set void Debug_UnderGroundData_AddTreasure(UNDERGROUNDDATA* pUGData, int type)
Set void Debug_SecretBaseData_AddGoods(SECRETBASEDATA* pSBData, int goodsType, int x, int z)
Set void UnderGroundDelFossilGroundItem(UNDERGROUNDDATA* pUGData, int index)
Set void SecretBaseData_ChangeGoodsPosition(SECRETBASEDATA* pSBData, int goodsIndex, int x, int z)
Set void D_SecretBaseRecordSetFlagDeliveryNum(SB_RECORD_DATA* pSBRecord,int num)
Set void SecretBaseSetSecretBasePosition(SECRETBASEDATA* pSec,int x,int z,int dir)
File /src/savedata/seedbed.c
Label GMDATA_ID_MISC
Set void SEEDBED_Init(SEEDBED * sbed)
Set void SEEDBED_SetDefaultData(SEEDBED * sbed, int heapID, const u16 * init_data, int max)
Set SEED_TABLE * SEEDBED_CreateParamTable(int heapID)
Set void SEEDBED_SetNuts(SEEDBED * sbed, int id, const SEED_TABLE * prm, int type)
Set void SEEDBED_SetSeedWater(SEEDBED * sbed, int id)
Set void SEEDBED_SetGrowthFlag(SEEDBED * sbed, int id, BOOL flag)
Set void SEEDBED_SetCompost(SEEDBED * sbed, int id, SEEDCOMPOST compost)
Set int SEEDBED_GetHarvest(SEEDBED * sbed, int id)
Set void SEEDBED_Growth(SEEDBED * sbed, const SEED_TABLE * prm, int minute)
File /src/savedata/misc.c
Label GMDATA_ID_MISC
Chk SEEDBED * SaveData_GetSeedBed(SAVEDATA * sv)

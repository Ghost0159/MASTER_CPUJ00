///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#ifndef __CORE_H__
#define __CORE_H__


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Core task/callback manager
#include "nonport.h"

#if defined(__cplusplus)
extern "C"
{
#endif


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#define GSICORE_MAXTASKS       40


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
typedef enum
{
	GSTaskResult_None,
	GSTaskResult_Finished,
	GSTaskResult_Canceled,
	GSTaskResult_TimedOut,
	GSTaskResult_InProgress
} GSTaskResult;


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// delegates (optional, may be NULL)
typedef void(*GSTaskExecuteFunc) (void* theTaskData);
typedef void(*GSTaskCallbackFunc)(void* theTaskData, GSTaskResult theResult);
typedef void(*GSTaskCancelFunc)  (void* theTaskData);
typedef void(*GSTaskCleanupFunc) (void* theTaskData); // post run cleanup
typedef GSTaskResult(*GSTaskThinkFunc)(void* theTaskData);


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// "Private" struct for dispatching tasks.  Once tasks have been put in the queue
// they should only be modified from the think thread.
//      - When creating a task, you should set only the task data and delegates
typedef struct 
{
	int mId;
	gsi_time mTimeout;
	gsi_time mStartTime;

	// These are not exclusive states (use bit flags?)
	gsi_i32  mIsStarted;   
	gsi_i32  mIsRunning;
	gsi_i32  mIsCanceled;
	gsi_i32  mIsCallbackPending; // does the task require a callback?

	// delegates
	void* mTaskData;
	GSTaskExecuteFunc  mExecuteFunc;
	GSTaskCallbackFunc mCallbackFunc;
	GSTaskCancelFunc   mCancelFunc;
	GSTaskCleanupFunc  mCleanupFunc;
	GSTaskThinkFunc    mThinkFunc;
} GSTask;


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
typedef struct 
{
	gsi_i32 mIsInitialized;
	gsi_i32 mIsShuttingDown;
	GSICriticalSection mQueueCrit;
	GSTask* mTaskArray[GSICORE_MAXTASKS];
} GSCoreMgr;


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
void gsCoreInitialize();
void gsCoreThink();
void gsCoreShutdown();
gsi_i32 gsCoreIsShutdown();
void gsiCoreExecuteTask(GSTask* theTask, gsi_time theTimeoutMs);
void gsiCoreCancelTask(GSTask* theTask);
GSTask* gsiCoreCreateTask();


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus)
}
#endif


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#endif // __CORE_H__
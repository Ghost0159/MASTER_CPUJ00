/*---------------------------------------------------------------------------*
  Project:  NitroSDK - WM - demos - wmPadRead-child
  File:     main.c

  Copyright 2007 Nintendo.  All rights reserved.

  These coded instructions, statements, and computer programs contain
  proprietary information of Nintendo of America Inc. and/or Nintendo
  Company Ltd., and are protected by Federal copyright law.  They may
  not be disclosed to third parties or copied or duplicated in any form,
  in whole or in part, without the prior written consent of Nintendo.

  $Log: main.BAK,v $
  Revision 1.1  2007/04/18 09:27:37  kitase_hirotake
  Initial Upload

  $NoKeywords: $
 *---------------------------------------------------------------------------*/

#include <nitro.h>
#include "data.h"

#include <nitro/wm.h>
#include "wc.h"

#include    <nitro/spi/ARM9/tp.h>
#include "tpdata.h"

/*---------------------------------------------------------------------------*
    定数定義
 *---------------------------------------------------------------------------*/
#define     PICTURE_FRAME_PER_GAME_FRAME    1

#define     DEFAULT_GGID            0x003fff21
#define     NUM_MAX_CHILD           15
#define     DEFAULT_CHAN            1
#define     PARENT_DATA_SIZE        64
#define     CHILD_DATA_SIZE         12

static const WMParentParam defaultParameter = {
    NULL, 0, 0,
    DEFAULT_GGID,                      // ゲームグループID
    0x0000,                            // temporary ID (毎回+1される)
    1,                                 // エントリー許可フラグ
    NUM_MAX_CHILD,                     // 最大接続子機数
    0,                                 // マルチブートフラグ (通常は0)
    0,                                 // (未使用)
    0,                                 // (未使用)
    200,                               // beacon 間隔
    {0, 0, 0, 0},                      // ユーザー名
    {0, 0, 0, 0, 0, 0, 0, 0},          // ゲーム名
    DEFAULT_CHAN,                      // 接続チャンネル
    PARENT_DATA_SIZE,                  // 親機送信データサイズ
    CHILD_DATA_SIZE                    // 子機送信データサイズ
};

static GXOamAttr oamBak[128];

void    ObjSet(int objNo, int x, int y, int charNo, int paletteNo);
void    VBlankIntr(void);

//---- DMA 番号
#define DMA_NO   3


static void InitializeAllocateSystem(void);
// データ受信時に呼び出される関数
static void MpReceiveCallback(u16 aid, u16 *data, u16 length);

// 表示用送受信バッファ
static u16 gRecvBuf[1 + WM_NUM_MAX_CHILD][2]; // 親機が配信する全プレイヤーのタッチ情報
static BOOL gRecvFlag[1 + WM_NUM_MAX_CHILD];

u16     keyData;

static void SetPoint16x16(int objNo, u16 pos_x, u16 pos_y, int charNo, int paletteNo);

static GXOamAttr gOam[128];

TPData  raw_point;
TPData  disp_point;
TPCalibrateParam calibrate;

static int checkMicData(void *address);
#define     TEST_BUFFER_SIZE    ( 1024 * 1024 ) // 1M
#define FFT_NSHIFT         9
#define FFT_N              (1 << FFT_NSHIFT)

//mic
static int input_mic;
static MICAutoParam gMicAutoParam;
static u8 *gMicData;

//fft
static fx32 data[FFT_N * 2];
static fx32 orig[FFT_N * 2];
static fx16 sinTable[FFT_N - FFT_N / 4];
static fx16 sinTable2[(FFT_N - FFT_N / 4) / 2];

//================================================================================
/*---------------------------------------------------------------------------*
  Name:         NitroMain

  Description:  main

  Arguments:    None

  Returns:      None
 *---------------------------------------------------------------------------*/
void NitroMain()
{
    //================ 初期化
    //---- OS 初期化
    OS_Init();

    TP_Init();
    
    // get CalibrateParameter from FlashMemory
    if (!TP_GetUserInfo(&calibrate))
    {
        OS_Panic("FATAL ERROR: can't read UserOwnerInfo\n");
    }
    else
    {
        OS_Printf("Get Calibration Parameter from NVRAM\n");
    }

    TP_SetCalibrateParam(&calibrate);

    //---- GX 初期化
    GX_Init();

    //================ 設定
    //---- 電源全てオン
    GX_SetPower(GX_POWER_ALL);

    //----  Vブランク割込許可
    (void)OS_SetIrqFunction(OS_IE_V_BLANK, VBlankIntr);
    (void)OS_EnableIrqMask(OS_IE_V_BLANK);
    (void)OS_EnableIrq();

    //---- Vブランク発生設定
    (void)GX_VBlankIntr(TRUE);

    //---- VRAM クリア
    GX_SetBankForLCDC(GX_VRAM_LCDC_ALL);
    MI_CpuClearFast((void *)HW_LCDC_VRAM, HW_LCDC_VRAM_SIZE);
    (void)GX_DisableBankForLCDC();

    //---- OAMとパレットクリア
    MI_CpuFillFast((void *)HW_OAM, 192, HW_OAM_SIZE);
    MI_CpuClearFast((void *)HW_PLTT, HW_PLTT_SIZE);

    MI_CpuFillFast((void *)HW_DB_OAM, 192, HW_DB_OAM_SIZE);
    MI_CpuClearFast((void *)HW_DB_PLTT, HW_DB_PLTT_SIZE);

    //---- バンクＡをＯＢＪへ
    GX_SetBankForOBJ(GX_VRAM_OBJ_128_A);

    GX_SetBankForSubOBJ(GX_VRAM_SUB_OBJ_128_D);

    //---- グラフィックス表示モードにする
    GX_SetGraphicsMode(GX_DISPMODE_GRAPHICS, GX_BGMODE_0, GX_BG0_AS_2D);

    //---- OBJの表示のみON
    GX_SetVisiblePlane(GX_PLANEMASK_OBJ);
    
    //---- 32KバイトのOBJで2Dマップモードで使用
    GX_SetOBJVRamModeChar(GX_OBJVRAMMODE_CHAR_2D);

    //---- データロード
    GX_LoadOBJ( sampleCharData, 0, sizeof(sampleCharData) );
    GX_LoadOBJPltt( samplePlttData, 0, sizeof(samplePlttData) );

    GXS_SetGraphicsMode(GX_BGMODE_0);    // BGMODE 0

    GXS_SetVisiblePlane(GX_PLANEMASK_OBJ);       // make OBJ visible
    GXS_SetOBJVRamModeBmp(GX_OBJVRAMMODE_BMP_1D_128K);   // 2D mapping OBJ

    /* Load character bitmap data */
    GXS_LoadOBJ( sampleCharData, 0, sizeof(sampleCharData) );
    GXS_LoadOBJPltt( samplePlttData, 0, sizeof(samplePlttData) );

    //---- 非表示OBJは画面外へ移動
    MI_DmaFill32(DMA_NO, oamBak, 0xc0, sizeof(oamBak));

    // メモリ割当
    InitializeAllocateSystem();

    // マイク関係初期化
    //****************************************************************
    // Initialize MIC.
    // OS_Allocで確保したメモリは32バイトALIGNになっているので、
    // キャッシュ操作しても他のメモリを壊さない。
    gMicData = (u8 *)OS_Alloc(TEST_BUFFER_SIZE);
    MIC_Init();

#ifdef  SDK_TS
    // PMIC初期化
    PM_Init();
    // AMPオン
    (void)PM_SetAmp(PM_AMP_ON);
#if ( SDK_TS_VERSION >= 100 )
    // AMPゲイン調整
    (void)PM_SetAmpGain(PM_AMPGAIN_80);
#endif
#if ( SDK_TS_VERSION == 100 )
    // ノイズ対策の為、LCDバックライトオフ
    (void)PM_SetBackLight(PM_LCD_ALL, PM_BACKLIGHT_OFF);
#endif
#endif

    gMicAutoParam.type = MIC_SAMPLING_TYPE_12BIT;       //フーリエ変換のため強制的に12bitに。
    gMicAutoParam.buffer = (void *)gMicData;
    gMicAutoParam.size = TEST_BUFFER_SIZE;
    gMicAutoParam.rate = MIC_SAMPLING_RATE_8K;
    gMicAutoParam.loop_enable = TRUE;
    gMicAutoParam.full_callback = NULL;
    (void)MIC_StartAutoSampling(&gMicAutoParam);
    //****************************************************************

    //********************************
    // 無線初期化
    WcInit(&defaultParameter, FALSE, FALSE, PICTURE_FRAME_PER_GAME_FRAME);
    WcSetMpReceiveCallback(MpReceiveCallback);
    //********************************

    //---- 表示開始
    OS_WaitVBlankIntr();
    GX_DispOn();

    GXS_DispOn();


    MI_CpuClear8( gRecvBuf, PARENT_DATA_SIZE);

    while(1)
    {
        int errorFlag = FALSE;
        int myAid;

        ObjSet(0, 100, 80, 'C', 4);
        ObjSet(1, 110, 80, 'O', 4);
        ObjSet(2, 120, 80, 'N', 4);
        ObjSet(3, 130, 80, 'N', 4);
        ObjSet(4, 140, 80, 'E', 4);
        ObjSet(5, 150, 80, 'C', 4);
        ObjSet(6, 160, 80, 'T', 4);
        MI_CpuClear8( (GXOamAttr *)&oamBak[7], sizeof(GXOamAttr) * 12);
        
        //---- Vブランク割込終了待ち
        OS_WaitVBlankIntr();
        
        // ModeSelect で子機選択
        WcStartChild();

        // wc が次のステートに移行するまで待つ
        while(WcGetStatus() == WC_STATUS_READY)
        {
            OS_WaitVBlankIntr();
        }
        if(WcGetStatus() != WC_STATUS_BUSY)
        {
            errorFlag = TRUE;
            OS_TPrintf(">>> error state in process of WC_STATUS_READY -> WC_STATUS_BUSY\n");
        }
        // wc が次のステートに移行するまで待つ
        while(WcGetStatus() == WC_STATUS_BUSY)
        {
            OS_WaitVBlankIntr();
        }
        if(WcGetStatus() != WC_STATUS_CHILD)
        {
            errorFlag = TRUE;
            OS_TPrintf(">>> error state in process of WC_STATUS_BUSY -> WC_STATUS_CHILD\n");
        }
        // ここまでで子機状態に移行完了
        
        myAid = WM_GetAID();

        if(errorFlag == FALSE)
        {
            //================ メインループ
            while (1)
            {
                // Draw Marker by calibrated point.
                while (TP_RequestRawSampling(&raw_point) != 0)
                {
                };
                TP_GetCalibratedPoint(&disp_point, &raw_point);

                if (disp_point.touch)
                {
                    SetPoint16x16(0, disp_point.x, disp_point.y, myAid + '0', 1);

                    switch (disp_point.validity)
                    {
                    case TP_VALIDITY_VALID:
                        OS_TPrintf("( %d, %d ) -> ( %d, %d )\n", raw_point.x, raw_point.y, disp_point.x,
                                  disp_point.y);
                        break;
                    case TP_VALIDITY_INVALID_X:
                        OS_TPrintf("( *%d, %d ) -> ( *%d, %d )\n", raw_point.x, raw_point.y, disp_point.x,
                                  disp_point.y);
                        break;
                    case TP_VALIDITY_INVALID_Y:
                        OS_TPrintf("( %d, *%d ) -> ( %d, *%d )\n", raw_point.x, raw_point.y, disp_point.x,
                                  disp_point.y);
                        break;
                    case TP_VALIDITY_INVALID_XY:
                        OS_TPrintf("( *%d, *%d ) -> ( *%d, *%d )\n", raw_point.x, raw_point.y, disp_point.x,
                                  disp_point.y);
                        break;
                    }
                }
                //---- Vブランク割込終了待ち
                OS_WaitVBlankIntr();

                //---- パッドデータ読み込み
                keyData = PAD_Read();

                //---- パッド情報を OBJ で表示
                ObjSet(0, 200, 90, 'A', (keyData & PAD_BUTTON_A) ? 1 : 2);
                ObjSet(1, 180, 95, 'B', (keyData & PAD_BUTTON_B) ? 1 : 2);

                ObjSet(2, 60, 50, 'L', (keyData & PAD_BUTTON_L) ? 1 : 2);
                ObjSet(3, 180, 50, 'R', (keyData & PAD_BUTTON_R) ? 1 : 2);

                ObjSet(4, 60, 80, 'U', (keyData & PAD_KEY_UP) ? 1 : 2);
                ObjSet(5, 60, 100, 'D', (keyData & PAD_KEY_DOWN) ? 1 : 2);
                ObjSet(6, 50, 90, 'L', (keyData & PAD_KEY_LEFT) ? 1 : 2);
                ObjSet(7, 70, 90, 'R', (keyData & PAD_KEY_RIGHT) ? 1 : 2);

                ObjSet(8, 130, 95, 'S', (keyData & PAD_BUTTON_START) ? 1 : 2);
                ObjSet(9, 110, 95, 'S', (keyData & PAD_BUTTON_SELECT) ? 1 : 2);

                ObjSet(10, 200, 75, 'X', (keyData & PAD_BUTTON_X) ? 1 : 2);
                ObjSet(11, 180, 80, 'Y', (keyData & PAD_BUTTON_Y) ? 1 : 2);

                //---- 折り畳み検知状態を OBJ で表示
                ObjSet(12, 120, 30, 'F', (PAD_DetectFold())? 1 : 2);
                
                ObjSet(13, 100, 5, 'A', 4);
                ObjSet(14, 110, 5, 'I', 4);
                ObjSet(15, 120, 5, 'D', 4);
                ObjSet(16, 130, 5, (myAid / 10) ? (myAid / 10) + '0' : ' ', 4);
                ObjSet(17, 140, 5, (myAid % 10) + '0', 4);

                // マイク入力チェック
                input_mic = checkMicData(MIC_GetLastSamplingAddress());
                ObjSet(18, 120, 120, 'M', input_mic ? 1 : 2);

                if( WcGetStatus() != WC_STATUS_CHILD )
                {
                    break;
                }
                
                // 受信情報から全プレイヤーのタッチ情報を描画
                {
                    int i;
                    
                    for(i = 0; i < WM_NUM_MAX_CHILD + 1; i++)
                    {
                        if( i != myAid )
                        {
                            SetPoint16x16(i+1, gRecvBuf[i][1], gRecvBuf[i][0], i+'0', 2);
                        }
                    }
                }
            }
        }
        WcEnd();
        
        //---- Vブランク割込終了待ち
        OS_WaitVBlankIntr();
    }
}

//--------------------------------------------------------------------------------
//  OBJ セット
//
void ObjSet(int objNo, int x, int y, int charNo, int paletteNo)
{
    G2_SetOBJAttr((GXOamAttr *)&oamBak[objNo],
                  x,
                  y,
                  0,
                  GX_OAM_MODE_NORMAL,
                  FALSE,
                  GX_OAM_EFFECT_NONE, GX_OAM_SHAPE_8x8, GX_OAM_COLOR_16, charNo, paletteNo, 0);
}


//--------------------------------------------------------------------------------
//    Ｖブランク割り込み処理
//
void VBlankIntr(void)
{
    static u32 gSendBuf[4] ATTRIBUTE_ALIGN(32);

    // 新規データ送信開始.
    switch (WcGetStatus())
    {
    case WC_STATUS_CHILD:
        if(PAD_DetectFold())
        {
            gSendBuf[0] = (u32)(keyData) | PAD_DETECT_FOLD_MASK;
        }
        else
        {
            gSendBuf[0] = (u32)(keyData);
        }
        gSendBuf[1] = (u32)(disp_point.x << 24 | disp_point.y << 16 | input_mic);
        //********************************
        WcSetChildData(gSendBuf, CHILD_DATA_SIZE);
        //********************************
        break;
    }

    //---- ＯＡＭの更新
    DC_FlushRange(oamBak, sizeof(oamBak));
    /* DMA操作でIOレジスタへアクセスするのでキャッシュの Wait は不要 */
    // DC_WaitWriteBufferEmpty();
    MI_DmaCopy32(DMA_NO, oamBak, (void *)HW_OAM, sizeof(oamBak));

    /* flush cache of OAM buffers to main memory */
    DC_FlushRange(gOam, sizeof(gOam));
    /* DMA操作でIOレジスタへアクセスするのでキャッシュの Wait は不要 */
    // DC_WaitWriteBufferEmpty();
    GXS_LoadOAM(gOam, 0, sizeof(gOam));
    MI_DmaFill32(3, gOam, 192, sizeof(gOam));       // Clear OAM buffer

    //---- 割り込みチェックフラグ
    OS_SetIrqCheckFlag(OS_IE_V_BLANK);
}

/*---------------------------------------------------------------------------*
  Name:         MpReceiveCallback

  Description:  MPデータ受信時に呼び出される関数。

  Arguments:    aid     - 送信元子機の aid( 0 の場合は親機からのデータ )
                data    - 受信データへのポインタ (NULL で切断通知)
                length  - 受信データのサイズ

  Returns:      None.
 *---------------------------------------------------------------------------*/
static void MpReceiveCallback(u16 aid, u16 *data, u16 length)
{
#pragma unused( length )
    SDK_MAX_ASSERT(aid, 15);

    if (data != NULL)
    {
        SDK_ASSERT(length >= 4);
        gRecvFlag[aid] = TRUE;
        // コピー元は2バイトアライン(4バイトアラインでない)
        if (aid == 0)
        {
            // 親機から受信した場合
            MI_CpuCopy8(data, gRecvBuf, PARENT_DATA_SIZE);
            OS_TPrintf("++ recv data = %x\n", *data);
        }
        else
        {
            // 自分は子機なのでこちらにくることはあり得ない.
            //MI_CpuCopy8(data, &(gRecvBuf[aid][0]), CHILD_DATA_SIZE);
        }
    }
    else
    {
        gRecvFlag[aid] = FALSE;
    }
}

/*---------------------------------------------------------------------------*
  Name:         InitializeAllocateSystem

  Description:  メインメモリ上のアリーナにてメモリ割当てシステムを初期化する。

  Arguments:    None.

  Returns:      None.
 *---------------------------------------------------------------------------*/
static void InitializeAllocateSystem(void)
{
    void   *tempLo;
    OSHeapHandle hh;

    // OS_Initは呼ばれているという前提
    tempLo = OS_InitAlloc(OS_ARENA_MAIN, OS_GetMainArenaLo(), OS_GetMainArenaHi(), 1);
    OS_SetArenaLo(OS_ARENA_MAIN, tempLo);
    hh = OS_CreateHeap(OS_ARENA_MAIN, OS_GetMainArenaLo(), OS_GetMainArenaHi());
    if (hh < 0)
    {
        OS_Panic("ARM9: Fail to create heap...\n");
    }
    hh = OS_SetCurrentHeap(OS_ARENA_MAIN, hh);
}

/*---------------------------------------------------------------------------*
  Name:         SetPoint16x16

  Description:  Display a 16x16 OBJ on indicated point.

  Arguments:    x - position X.
                y - position Y.

  Returns:      None.
 *---------------------------------------------------------------------------*/
static void SetPoint16x16(int objNo, u16 pos_x, u16 pos_y, int charNo, int paletteNo)
{
    G2_SetOBJAttr((GXOamAttr *)&gOam[objNo],
                  pos_x - 8,
                  pos_y - 8,
                  0,
                  GX_OAM_MODE_NORMAL,
                  FALSE,
                  GX_OAM_EFFECT_NONE, GX_OAM_SHAPE_8x8, GX_OAM_COLOR_16, charNo, paletteNo, 0);
}

/*---------------------------------------------------------------------------*
  Name:         SetDrawData

  Description:  現状での最新サンプリング済みデータを表示に反映させるバッファに
                格納する。

  Arguments:    address - コンポーネントによって最新のサンプリングデータが
                          格納されたメインメモリ上の位置。
                          
  Returns:      None.
 *---------------------------------------------------------------------------*/
static int checkMicData(void *address)
{
    s32     i;

    u16    *p;


    // サンプリングが一回も行われていない場合は何もせずに終了
    // (マイクと無関係のメモリのキャッシュを破棄してしまう為)
    if ((address < gMicData) || (address >= (gMicData + TEST_BUFFER_SIZE)))
    {
        return 0;
    }

    MATH_MakeFFTSinTable(sinTable, FFT_NSHIFT);
    MATH_MakeFFTSinTable(sinTable2, FFT_NSHIFT - 1);

    //12bitサンプリングであるが、データ的には16bit使用している(2x511=1022).
    p = (u16 *)((u32)address - 1022);
    if ((u32)p < (u32)gMicData)
    {
        p = (u16 *)((u32)p + TEST_BUFFER_SIZE);
    }
    DC_InvalidateRange((void *)((u32)p & 0xffffffe0), 32);
    for (i = 0; i < FFT_N; i++)
    {
        orig[i * 2] = data[i * 2] = ((*p) << 6);
        orig[i * 2 + 1] = data[i * 2 + 1] = 0;
        p++;
        if ((u32)p >= (u32)(gMicData + TEST_BUFFER_SIZE))
        {
            p = (u16 *)((u32)p - TEST_BUFFER_SIZE);
        }
        if (((u32)p % 32) == 0)
        {
            DC_InvalidateRange(p, 32);
        }
    }

    MATH_FFT(data, FFT_NSHIFT, sinTable);

    // マイク入力をチェック
    {
        fx32 check_count = 0;
        
        for (i = 1; i < FFT_N * 2; i++)
        {
            check_count += data[i];
        }
        OS_TPrintf("check_count = %x\n", check_count);
        // 一定量以上の入力値があるかチェック
        if (check_count > 0x10000)
        {
            return 1;
        }
    }
    return 0;
}

/*====== End of main.c ======*/
